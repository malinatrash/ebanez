import markovify
import os
from pathlib import Path
from typing import List, Optional
from .database import Database
import logging

logger = logging.getLogger(__name__)

class MarkovChainGenerator:
    def __init__(self, state_size=1, min_messages=5):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        self.db = Database()
        self.state_size = state_size
        self.min_messages = min_messages
        self.model = None
        self.message_counter = 0
        self.rebuild_threshold = 10
        self.models_dir = Path(__file__).parent.parent.parent / 'data' / 'models'
        self.models_dir.mkdir(parents=True, exist_ok=True)
        logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –º–æ–¥–µ–ª–µ–π: {self.models_dir}")
        logger.info("MarkovChainGenerator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def get_model_path(self, chat_id: int) -> Path:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
        model_path = self.models_dir / f"model_{chat_id}.json"
        logger.info(f"–ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏: {model_path}")
        return model_path

    def add_message(self, chat_id: int, message: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        try:
            if self.db.add_message(chat_id, message):
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                stats = self.db.get_chat_stats(chat_id)
                total_messages = stats['total_messages']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å
                if total_messages >= self.min_messages and total_messages % 10 == 0:
                    logger.info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π, –æ–±–Ω–æ–≤–ª—è—é –º–æ–¥–µ–ª—å...")
                    if self.rebuild_model(chat_id):
                        logger.info("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                    else:
                        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å")
                else:
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ, —Å—á–µ—Ç—á–∏–∫: {total_messages % 10}/10")
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
        return False

    def rebuild_model(self, chat_id: int):
        """–ü–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã
            messages = self.db.get_messages(chat_id)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
            logger.debug(f"–ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π: {messages[:5]}")
            
            if not messages:
                logger.warning("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
                self.model = None
                return False

            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤ —Ç–µ–∫—Å—Ç
            valid_messages = [msg for msg in messages if msg and len(msg.strip()) > 2]
            logger.info(f"–í–∞–ª–∏–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(valid_messages)}")
            
            if not valid_messages:
                logger.warning("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
                self.model = None
                return False
                
            text = "\n".join(valid_messages)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
            try:
                logger.info(f"–°–æ–∑–¥–∞—é –º–æ–¥–µ–ª—å —Å state_size={self.state_size}")
                self.model = markovify.NewlineText(text, state_size=self.state_size, well_formed=False)
                
                for _ in range(10):  # –ü—Ä–æ–±—É–µ–º 10 —Ä–∞–∑
                    test_sentence = self.model.make_short_sentence(
                        max_chars=100,
                        min_chars=1,
                        tries=50
                    )
                    if test_sentence:
                        logger.info(f"–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {test_sentence}")
                        if self.save_model(chat_id):
                            logger.info("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                            return True
                        break
                
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
                return False
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
                self.model = None
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–µ –º–æ–¥–µ–ª–∏: {e}")
            self.model = None
            return False
            
    def save_model(self, chat_id: int) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ —Ñ–∞–π–ª"""
        if not self.model:
            logger.error("No model to save")
            return False
            
        try:
            model_path = self.get_model_path(chat_id)
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            model_path.parent.mkdir(parents=True, exist_ok=True)
            
            model_json = self.model.to_json()
            if not model_json:
                logger.error("Failed to convert model to JSON")
                return False
                
            with open(model_path, 'w', encoding='utf-8') as f:
                f.write(model_json)
            logger.info(f"Model saved to {model_path}")
            return True
        except Exception as e:
            logger.error(f"Error saving model: {e}")
            return False

    def load_model(self, chat_id: int) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
        try:
            model_path = self.get_model_path(chat_id)
            if model_path.exists():
                with open(model_path, 'r', encoding='utf-8') as f:
                    model_json = f.read()
                    if not model_json:
                        logger.error("Model file is empty")
                        return False
                        
                    self.model = markovify.Text.from_json(model_json)
                    if not self.model:
                        logger.error("Failed to load model from JSON")
                        return False
                        
                    logger.info(f"Model loaded from {model_path}")
                    return True
            else:
                logger.info(f"No existing model found, rebuilding for chat {chat_id}")
                return self.rebuild_model(chat_id)
        except Exception as e:
            logger.error(f"Error loading model: {e}")
            self.model = None
            return False

    def generate_response(self, chat_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–∏"""
        try:
            if not self.model:
                if not self.load_model(chat_id):
                    return None
                    
            # –ü—Ä–æ–±—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
            for _ in range(10):
                response = self.model.make_short_sentence(
                    max_chars=100,
                    min_chars=1,
                    tries=50
                )
                if response:
                    return response
                    
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç")
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return None

    def get_stats(self, chat_id: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞"""
        stats = self.db.get_chat_stats(chat_id)
        model_size = os.path.getsize(self.get_model_path(chat_id)) // 1024 if self.get_model_path(chat_id).exists() else 0
        
        return (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è:\n"
            f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ: {stats['total_messages']}\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∏: {self.rebuild_threshold - self.message_counter}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {stats['avg_message_length']} —Å–ª–æ–≤\n"
            f"‚Ä¢ –†–∞–∑–º–µ—Ä –±–∞–∑—ã: {self.db.get_db_size() // 1024}KB\n"
            f"‚Ä¢ –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: {model_size}KB\n"
            f"‚Ä¢ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {'‚úÖ' if stats['total_messages'] >= self.min_messages else '‚ùå'}"
        )

    def clear_memory(self, chat_id: int) -> bool:
        """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ —á–∞—Ç–∞"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã
            self.db.clear_chat_history(chat_id)
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏
            model_path = self.get_model_path(chat_id)
            if model_path.exists():
                model_path.unlink()
                logger.info(f"Model file deleted: {model_path}")
            
            self.model = None
            self.message_counter = 0
            logger.info(f"Memory cleared for chat {chat_id}")
            
            return True
        except Exception as e:
            logger.error(f"Error clearing memory: {e}")
            return False
