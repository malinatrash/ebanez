from telegram import Update, ReactionTypeEmoji
from telegram.ext import ContextTypes
from ..services.markov_chain import MarkovChainGenerator
from ..services.sticker_storage import StickerStorage
import logging
import random

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)

markov_generator = MarkovChainGenerator()
sticker_storage = StickerStorage()

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π
REACTIONS = [
    "üëç", "‚ù§Ô∏è", "üî•", "üëè", "ü§£", "ü§î", "üëÄ", "üéâ", "üôà", "ü§∑‚Äç‚ôÇÔ∏è",
    "ü´°", "üóø", "ü§®", "ü•π", "ü´¢", "ü§å", "üíÖ", "ü§°", "ü•∏", "ü§™", "üçå", "ü§°", "‚ù§Ô∏è", "üíï", "ü§£", "üí©"
]

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    chat_id = update.effective_chat.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç chat_id={chat_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    if not update.message:
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ")
        return
        
    logger.info(f"–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {type(update.message)}")
    logger.info(f"–ê—Ç—Ä–∏–±—É—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è: text={update.message.text}, sticker={update.message.sticker}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∏–∫–µ—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if update.message.sticker:
        sticker = update.message.sticker
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å—Ç–∏–∫–µ—Ä: file_id={sticker.file_id}, set_name={sticker.set_name}")
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∏–∫–µ—Ä
            if sticker_storage.add_sticker(chat_id, sticker.file_id):
                logger.info(f"–°—Ç–∏–∫–µ—Ä {sticker.file_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            else:
                logger.info(f"–°—Ç–∏–∫–µ—Ä {sticker.file_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ
            if sticker.set_name:
                sticker_set = await context.bot.get_sticker_set(sticker.set_name)
                logger.info(f"–ü–æ–ª—É—á–µ–Ω –Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤ {sticker_set.name} ({len(sticker_set.stickers)} —Å—Ç–∏–∫–µ—Ä–æ–≤)")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å—Ç–∏–∫–µ—Ä—ã –∏–∑ –Ω–∞–±–æ—Ä–∞
                saved_count = 0
                for s in sticker_set.stickers:
                    if sticker_storage.add_sticker(chat_id, s.file_id):
                        saved_count += 1
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –Ω–æ–≤—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –Ω–∞–±–æ—Ä–∞ {sticker_set.name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤
            saved_stickers = sticker_storage.get_stickers(chat_id)
            logger.info(f"–í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å—Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {len(saved_stickers)}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ—Ç –∂–µ —Å—Ç–∏–∫–µ—Ä –≤ –æ—Ç–≤–µ—Ç
            await context.bot.send_sticker(chat_id=chat_id, sticker=sticker.file_id)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∏–∫–µ—Ä {sticker.file_id} –≤ –æ—Ç–≤–µ—Ç")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∏–∫–µ—Ä–∞: {str(e)}")
        return

    if not update.message or not update.message.text:
        return

    message = update.message.text.strip()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç chat_id={chat_id}: {message}")
    
    if message.startswith('/'):
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.message.text:
        message_text = update.message.text.strip()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if message_text.startswith('/'):
            return
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        message_added, is_valid = markov_generator.add_message(chat_id, message_text)
        
        if message_added:
            # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–µ - —Ä–µ–∞–≥–∏—Ä—É–µ–º üëÄ
            model_path = markov_generator.get_model_path(chat_id)
            if not model_path.exists() and is_valid:
                try:
                    await update.message.set_reaction([ReactionTypeEmoji("üëÄ")])
                    logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è üëÄ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é (–≤–∞–ª–∏–¥–Ω–æ–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è)")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏: {e}")
            
            # –°–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not model_path.exists() and random.random() < 0.1:  # 10% —à–∞–Ω—Å
                response = markov_generator.generate_response(chat_id)
                if response:
                    try:
                        await update.message.reply_text(response)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
    
    # –°–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é (20% —à–∞–Ω—Å)
    if random.random() < 0.2:
        try:
            await update.message.set_reaction([ReactionTypeEmoji(random.choice(REACTIONS))])
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è {random.choice(REACTIONS)} –∫ —Å–æ–æ–±—â–µ–Ω–∏—é")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏: {e}")

    # –°–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä (10% —à–∞–Ω—Å)
    if random.random() < 0.1:
        sticker_id = sticker_storage.get_random_sticker(chat_id)
        if sticker_id:
            try:
                await update.message.reply_sticker(sticker_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–∞: {str(e)}")
        else:
            logger.info(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è chat_id={chat_id}")

async def handle_my_chat_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç"""
    if not update.my_chat_member or not update.my_chat_member.new_chat_member:
        return
        
    # –ë–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç
    if update.my_chat_member.new_chat_member.status in ['member', 'administrator']:
        chat_id = update.effective_chat.id
        logger.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = []
        try:
            async for message in context.bot.get_chat_history(chat_id, limit=100):
                if message.text:
                    messages.append(message.text)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É
        added_count = 0
        for message in messages:
            if markov_generator.add_message(chat_id, message):
                added_count += 1
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑—É")
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=chat_id,
            text="–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±—É–¥—É —É—á–∏—Ç—å—Å—è –Ω–∞ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ –∏–Ω–æ–≥–¥–∞ –æ—Ç–≤–µ—á–∞—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ."
        )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'option1':
        response = markov_generator.generate_response()
        await query.message.reply_text(response)
    elif query.data == 'option2':
        stats = markov_generator.get_stats()
        await query.message.reply_text(stats)
