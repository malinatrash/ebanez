from telegram import Update, ReactionTypeEmoji
from telegram.ext import ContextTypes
from ..services.markov_chain import MarkovChainGenerator
from ..services.sticker_storage import StickerStorage
from ..services.weather_service import WeatherService
import logging
import random
import asyncio

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)

markov_generator = MarkovChainGenerator()
sticker_storage = StickerStorage()
weather_service = WeatherService()

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π
REACTIONS = [
    "üëç", "‚ù§Ô∏è", "üî•", "üëè", "ü§£", "ü§î", "üëÄ", "üéâ", "üôà", "ü§∑‚Äç‚ôÇÔ∏è",
    "ü´°", "üóø", "ü§®", "ü•π", "ü´¢", "ü§å", "üíÖ", "ü§°", "ü•∏", "ü§™", "üçå", "ü§°", "‚ù§Ô∏è", "üíï", "ü§£", "üí©"
]


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    chat_id = update.effective_chat.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç chat_id={chat_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    if not update.message:
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ")
        return

    logger.info(f"–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {type(update.message)}")
    logger.info(
        f"–ê—Ç—Ä–∏–±—É—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è: text={update.message.text}, sticker={update.message.sticker}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∏–∫–µ—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if update.message.sticker:
        sticker = update.message.sticker
        logger.info(
            f"–ü–æ–ª—É—á–µ–Ω —Å—Ç–∏–∫–µ—Ä: file_id={sticker.file_id}, set_name={sticker.set_name}")

        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∏–∫–µ—Ä
            if sticker_storage.add_sticker(chat_id, sticker.file_id):
                logger.info(f"–°—Ç–∏–∫–µ—Ä {sticker.file_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            else:
                logger.info(
                    f"–°—Ç–∏–∫–µ—Ä {sticker.file_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å")

            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ
            if sticker.set_name:
                sticker_set = await context.bot.get_sticker_set(sticker.set_name)
                logger.info(
                    f"–ü–æ–ª—É—á–µ–Ω –Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤ {sticker_set.name} ({len(sticker_set.stickers)} —Å—Ç–∏–∫–µ—Ä–æ–≤)")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å—Ç–∏–∫–µ—Ä—ã –∏–∑ –Ω–∞–±–æ—Ä–∞
                saved_count = 0
                for s in sticker_set.stickers:
                    if sticker_storage.add_sticker(chat_id, s.file_id):
                        saved_count += 1
                logger.info(
                    f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –Ω–æ–≤—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –Ω–∞–±–æ—Ä–∞ {sticker_set.name}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤
            saved_stickers = sticker_storage.get_stickers(chat_id)
            logger.info(
                f"–í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å—Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {len(saved_stickers)}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ—Ç –∂–µ —Å—Ç–∏–∫–µ—Ä –≤ –æ—Ç–≤–µ—Ç
            await context.bot.send_sticker(chat_id=chat_id, sticker=sticker.file_id)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∏–∫–µ—Ä {sticker.file_id} –≤ –æ—Ç–≤–µ—Ç")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∏–∫–µ—Ä–∞: {str(e)}")
        return

    if not update.message or not update.message.text:
        return

    message = update.message.text.strip()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç chat_id={chat_id}: {message}")

    if message.startswith('/'):
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.message.text:
        message_text = update.message.text.strip()

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message_text.startswith('/') or len(message_text.split()) < 2:
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        message_added, is_valid = markov_generator.add_message(
            chat_id, message_text)
        model_path = markov_generator.get_model_path(chat_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å
        stats = markov_generator.db.get_chat_stats(chat_id)
        total_messages = stats['total_messages'] if stats else 0

        # –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message_added and is_valid:
            try:
                # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if not model_path.exists():
                    progress = (total_messages / 50) * 100  # 50 - min_messages
                    progress = min(int(progress), 100)
                    progress_bar = "‚ñì" * (progress // 10) + \
                        "‚ñë" * (10 - (progress // 10))

                    if total_messages % 5 == 0:  # –ö–∞–∂–¥—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                        await update.message.reply_text(
                            f"–°–æ–±–∏—Ä–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è... {progress}%\n"
                            f"[{progress_bar}]\n"
                            f"–ù—É–∂–Ω–æ –µ—â–µ {max(0, 50 - total_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π"
                        )
                else:
                    # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ –µ—Å—Ç—å, –∏–Ω–æ–≥–¥–∞ —Ä–µ–∞–≥–∏—Ä—É–µ–º —ç–º–æ–¥–∑–∏
                    if random.random() < 0.1:  # 10% —à–∞–Ω—Å –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é
                        await update.message.set_reaction([ReactionTypeEmoji(random.choice(REACTIONS))])

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if model_path.exists():
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
            message_length = len(message_text.split())
            # 5-15% –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã
            reply_chance = 0.05 + (0.01 * min(message_length, 10))

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –±–æ—Ç–∞ —É–ø–æ–º—è–Ω—É–ª–∏
            if update.message.entities and any(e.type == 'mention' for e in update.message.entities):
                reply_chance = 1  # 100% —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏

            # –°–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —Ä–µ—à–∞–µ–º, –æ—Ç–≤–µ—á–∞—Ç—å –ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if random.random() < reply_chance:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç..."
                status_msg = await update.message.reply_chat_action('typing')

                try:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                    response = markov_generator.generate_response(
                        chat_id, message_text)

                    if response:
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
                        await asyncio.sleep(1 + random.random() * 2)

                        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await update.message.reply_text(
                            response,
                            reply_to_message_id=update.message.message_id
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")

            # 15% —à–∞–Ω—Å –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é
            elif response_type < 0.10:
                try:
                    reaction = random.choice(REACTIONS)
                    await update.message.set_reaction([ReactionTypeEmoji(reaction)])
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è {reaction} –∫ —Å–æ–æ–±—â–µ–Ω–∏—é")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏: {e}")

            # 10% —à–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä
            elif response_type < 0.10:
                sticker_id = sticker_storage.get_random_sticker(chat_id)
                if sticker_id:
                    try:
                        await update.message.reply_sticker(sticker_id)
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∏–∫–µ—Ä {sticker_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–∞: {str(e)}")
                else:
                    logger.info(
                        f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è chat_id={chat_id}")


async def handle_weather_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /weather - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ"""
    chat_id = update.effective_chat.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /weather –≤ —á–∞—Ç–µ {chat_id}")

    try:
        weather_message = await weather_service.get_weather_and_traffic()
        await update.message.reply_text(weather_message)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ –≤ —á–∞—Ç {chat_id}")
    except Exception as e:
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ üòî"
        await update.message.reply_text(error_message)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /weather: {e}")


async def handle_my_chat_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç"""
    if not update.my_chat_member or not update.my_chat_member.new_chat_member:
        return

    # –ë–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç
    if update.my_chat_member.new_chat_member.status in ['member', 'administrator']:
        chat_id = update.effective_chat.id
        logger.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = []
        try:
            async with context.application.bot.get_chat(chat_id) as chat:
                async for message in chat.get_messages(limit=100):
                    if message.text and not message.text.startswith('/'):
                        messages.append(message)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É
        added_count = 0
        for message in messages:
            if markov_generator.add_message(chat_id, message.text):
                added_count += 1
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑—É")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=chat_id,
            text="–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±—É–¥—É —É—á–∏—Ç—å—Å—è –Ω–∞ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ –∏–Ω–æ–≥–¥–∞ –æ—Ç–≤–µ—á–∞—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ."
        )


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    if query.data == 'option1':
        response = markov_generator.generate_response()
        await query.message.reply_text(response)
    elif query.data == 'option2':
        stats = markov_generator.get_stats()
        await query.message.reply_text(stats)


async def send_weather_updates(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã"""
    while True:
        try:
            weather_message = await weather_service.get_weather_and_traffic()

            for chat_id in weather_service.weather_enabled_groups:
                try:
                    await context.bot.send_message(chat_id=chat_id, text=weather_message)
                    logger.info(
                        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ –≤ —á–∞—Ç {chat_id}")
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–≥–æ–¥—ã –≤ —á–∞—Ç {chat_id}: {e}")

            # –ñ–¥–µ–º 3 —á–∞—Å–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            await asyncio.sleep(10800)  # 3 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≥–æ–¥—ã: {e}")
            # –ü–æ–¥–æ–∂–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await asyncio.sleep(300)
