from telegram import Update
from telegram.ext import ContextTypes
from .message_handlers import markov_generator, sticker_storage
import logging
import random

logger = logging.getLogger(__name__)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É—á–∏—Ç—Å—è –æ–±—â–∞—Ç—å—Å—è, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —Å–æ –º–Ω–æ–π —Ä–∞–±–æ—Ç–∞—Ç—å."
    )
    
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    await update.message.reply_text(
        "*ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*\n\n"
        "*–û—Å–Ω–æ–≤–Ω—ã–µ:*\n"
        "‚îî‚îÄ /start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ\n"
        "‚îî‚îÄ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "*–û–±—É—á–µ–Ω–∏–µ:*\n"
        "‚îî‚îÄ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è\n"
        "‚îî‚îÄ /gen - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚îî‚îÄ /clear - –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å —á–∞—Ç–∞\n"
        "‚îî‚îÄ /rebuild - –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å\n\n"
        "*–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:*\n"
        "‚îî‚îÄ /sticker - –°–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–∫–µ—Ä\n"
        "‚îî‚îÄ /top - –¢–æ–ø –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–ª–æ–≤\n"
        "‚îî‚îÄ /mood - –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —á–∞—Ç–∞\n\n"
        "‚ùóÔ∏è –ë–æ—Ç —É—á–∏—Ç—Å—è –Ω–∞ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.\n"
        "–ü–µ—Ä–≤–∞—è –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π.",
        parse_mode='Markdown'
    )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    chat_id = update.effective_chat.id
    stats = markov_generator.get_stats(chat_id)
    await update.message.reply_text(stats)

async def generate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    chat_id = update.effective_chat.id
    response = markov_generator.generate_response(chat_id)
    await update.message.reply_text(response)

async def clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å —á–∞—Ç–∞"""
    chat_id = update.effective_chat.id
    if markov_generator.clear_memory(chat_id):
        await update.message.reply_text(
            "üßπ –ü–∞–º—è—Ç—å —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞!\n"
            "–ë–æ—Ç –Ω–∞—á–Ω–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ."
        )
    else:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–∞–º—è—Ç–∏."
        )

async def rebuild_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    chat_id = update.effective_chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    messages = markov_generator.db.get_messages(chat_id)
    if not messages:
        await update.message.reply_text(
            "‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–æ–¥–µ–ª–∏!\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ —É—á–∏—Ç—å—Å—è."
        )
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    valid_messages = [msg for msg in messages if msg and len(msg.strip()) > 2]
    if len(valid_messages) < markov_generator.min_messages:
        await update.message.reply_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–æ–¥–µ–ª–∏!\n"
            f"–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {markov_generator.min_messages} —Å–æ–æ–±—â–µ–Ω–∏–π, "
            f"–∞ —É –≤–∞—Å —Ç–æ–ª—å–∫–æ {len(valid_messages)}."
        )
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    status = await update.message.reply_text("üîÑ –û–±–Ω–æ–≤–ª—è—é –º–æ–¥–µ–ª—å...")
    
    try:
        if markov_generator.rebuild_model(chat_id):
            await status.edit_text("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            logger.info(f"–ú–æ–¥–µ–ª—å –¥–ª—è chat_id={chat_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            await status.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å")
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è chat_id={chat_id}")
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}"
        logger.error(error_msg)
        await status.edit_text(error_msg)

async def sticker_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–∫–µ—Ä"""
    if not update.message:
        return
        
    chat_id = update.effective_chat.id
    stickers = sticker_storage.get_stickers(chat_id)
    
    if not stickers:
        await update.message.reply_text("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤!")
        return
        
    try:
        sticker_id = random.choice(stickers)
        await context.bot.send_sticker(chat_id=chat_id, sticker=sticker_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–∞: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä")

async def top_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–ª–æ–≤"""
    chat_id = update.effective_chat.id
    messages = markov_generator.db.get_messages(chat_id)
    
    if not messages:
        await update.message.reply_text("‚ùå –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞")
        return
        
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ª–æ–≤
    word_stats = {}
    for msg in messages:
        for word in msg.lower().split():
            if len(word) > 2:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
                word_stats[word] = word_stats.get(word, 0) + 1
                
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –±–µ—Ä–µ–º —Ç–æ–ø-10
    top_words = sorted(word_stats.items(), key=lambda x: x[1], reverse=True)[:10]
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = "*üìà –¢–æ–ø-10 —Å–ª–æ–≤ –≤ —á–∞—Ç–µ:*\n\n"
    for i, (word, count) in enumerate(top_words, 1):
        response += f"{i}. `{word}`: {count} —Ä–∞–∑\n"
        
    await update.message.reply_text(response, parse_mode='Markdown')

async def mood_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —á–∞—Ç–∞"""
    chat_id = update.effective_chat.id
    messages = markov_generator.db.get_messages(chat_id)
    
    if not messages:
        await update.message.reply_text("‚ùå –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞")
        return
        
    # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ —ç–º–æ–¥–∑–∏ –∏ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    positive = ['üòä', 'üòÑ', 'üëç', '‚ù§Ô∏è', '–∫—Ä—É—Ç–æ', '–∫–ª–∞—Å—Å', '—Å—É–ø–µ—Ä', '–æ—Ç–ª–∏—á–Ω–æ']
    negative = ['üò¢', 'üò†', 'üëé', 'üíî', '–ø–ª–æ—Ö–æ', '—É–∂–∞—Å', '–æ—Ç—Å—Ç–æ–π']
    
    pos_count = 0
    neg_count = 0
    
    for msg in messages:
        msg_lower = msg.lower()
        for word in positive:
            pos_count += msg_lower.count(word)
        for word in negative:
            neg_count += msg_lower.count(word)
            
    total = pos_count + neg_count
    if total == 0:
        mood = "üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ"
        mood_bar = "‚ñì" * 5 + "‚ñë" * 5
    else:
        mood_ratio = pos_count / total
        if mood_ratio > 0.8:
            mood = "ü§© –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ"
        elif mood_ratio > 0.6:
            mood = "üòä –•–æ—Ä–æ—à–µ–µ"
        elif mood_ratio > 0.4:
            mood = "üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ"
        elif mood_ratio > 0.2:
            mood = "üòï –¢–∞–∫ —Å–µ–±–µ"
        else:
            mood = "üò¢ –ì—Ä—É—Å—Ç–Ω–æ–µ"
        mood_bar = "‚ñì" * int(mood_ratio * 10) + "‚ñë" * (10 - int(mood_ratio * 10))
    
    response = (
        f"*üé≠ –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —á–∞—Ç–∞*\n\n"
        f"*–¢–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:* {mood}\n"
        f"*–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:* [{mood_bar}]\n\n"
        f"*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        f"‚îî‚îÄ –ü–æ–∑–∏—Ç–∏–≤: `{pos_count}`\n"
        f"‚îî‚îÄ –ù–µ–≥–∞—Ç–∏–≤: `{neg_count}`"
    )
    
    await update.message.reply_text(response, parse_mode='Markdown')
